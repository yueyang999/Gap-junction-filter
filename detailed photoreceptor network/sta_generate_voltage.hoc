
load_file("stdgui.hoc")
dt = 0.500000
TO = 10
g_gap = 0.0010000
NOISE = 0
NOISE_N = 1000000
NOISE_dt = 200
// load_file("stdgui.hoc")
// g_gap = 0.0001
// TO = 10
// dt = 0.5
// NOISE = 2
// NOISE_N = 100000
// NOISE_dt = 1000

REC_STEP = 2

CENTER = TO*(TO/2)+(TO/2)

tstop = NOISE_N*NOISE_dt

load_file("P-ROD.hoc")

secondorder=2
cvode.active(0)

STIM_LOC = 0.1
GAP_LOC = 0.6
REC_LOC = 0.9

N = TO*TO
NC = ((TO*TO*4-TO*4)/2)*2

objref rods, gaps, stims, pc, nclist
objref conns, rod, photo, f, w, gap, nc, nil
strdef s

pc = new ParallelContext()

nwork = pc.nhost
if (nwork < 2){
    nwork=1
    myid = 0
}else{
    myid = pc.id
}

rods = new List()
gaps = new List()
stims = new List()

for i=0,N-1{
    node_id = i%nwork
    pc.set_gid2node(i, node_id)
}

objref v_stim, stim

sprint(s, "stim_sample") //partial stimuli
f = new File(s)
f.ropen()

ratio = NOISE_dt/dt
n = NOISE_N*ratio

sg = 0

for gid = 0, N-1{
    if(pc.gid_exists(gid) > 0){
        stim = new Vector(NOISE_N)
        for j=0,NOISE_N-1{
            stim.x[j] = f.scanvar()
        }

        rod = new ROD(gid)
        rod.soma rod.photo = new photocurrent(STIM_LOC)
        rod.photo.env=0
        rod.photo.stime=1000
        rod.photo.htime=tstop
	stim.play(&rod.photo.input, NOISE_dt)
	rod.soma pc.source_var(&v(GAP_LOC), gid)
	stims.append(stim)
	rods.append(rod)    
    }else{ 
        j = 0
        for j=0, NOISE_N-1{
            value = f.scanvar()
        }
       
    }
}

f.close()

sprint(s, "conn_e")
strdef line
from_id = 0
to_id = 0

f = new File(s)
f.ropen()
for i=0, NC-1{
    f.gets(line)
    sscanf(line, "%d %d", &from_id, &to_id)
    if(pc.gid_exists(to_id) > 0){
	rod = rods.o(int(to_id/nwork))
	rod.soma gap = new PGap(GAP_LOC)
	gap.g = g_gap
	pc.target_var(&gap.vgap, from_id)
	gaps.append(gap)
        // gap = rod.new_gap(g_gap)
     }
}
f.close()

proc setdt(){
   dt = dt
}

proc init() {
  finitialize(-42.8838)
  fcurrent()
}

objref ws
ws = new List()
objref w_recs
w_recs = new Vector()

n = rods.count()

rec = 0
while(rec <= N){
   if(pc.gid_exists(rec) > 0) {
      sprint(s, "%d_%d_%d_%d_res_%g_%d.txt", NOISE_dt, NOISE, TO, NOISE_N, g_gap, rec)
      w = new File()
      w.wopen(s)
      ws.append(w)
      con = rec%nwork
      w_recs.append(con)
    }
   rec = rec + 1
}

c = 0

proc record(){
   for i=0, ws.count()-1{
      ws.o(i).printf("%.10g\n", rods.o(i).soma.v(REC_LOC))
   }
}

pc.setup_transfer()
pc.set_maxstep(2)
stdinit()

k = 0

t = 0
while(t< tstop){
   //t += dt
   //print 1, t
   pc.psolve(t+dt)
   //print 2, t
   record()
   k += 1
//   print 3, t
}

pc.done()

// for i=0,n-1{

    // w = new File()
    // sprint(s, "../datas/sta/%d_res_%g_%d", NOISE, g_gap, rods.o(i).gid)
    // w.wopen(s)
    // for j = 0, T-1{
    //     w.printf("%g\n", v_records.o(i).x[j])
    // }
    // w.close()

//    ws.o(i).close()
    
// }

for i=0, ws.count()-1{
    ws.o(i).close()
    print tstop/dt, tstop, dt, c, k
}


